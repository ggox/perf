<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器  -->
	<context:component-scan base-package="com.dp.web" />
	
	<!-- 支持json和 @MatrixVariable的注解驱动 -->
	<mvc:annotation-driven enable-matrix-variables="true" validator="validator">
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 允许对静态资源文件的访问 -->
	<mvc:default-servlet-handler />
	<!-- 定义跳转的jsp文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 自动给后面controller的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 不经过controller，直接view在这里配置 -->
	<!-- <mvc:view-controller path="/" view-name="" /> -->
	
	<!-- spring mvc 国际化 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages/message"/>
		<property name="fileEncodings" value="utf8"></property>
	</bean>
	
	<!-- mvc拦截器 -->
	<mvc:interceptors>
		<!-- 直接配置bean，mapping默认/* -->
		<bean id="localeChangeInterceptor"
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="lang" />
		</bean>
	</mvc:interceptors>
	<!-- 表单数据后台校验 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 使用hibernate validator -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"></property>
		<!-- 错误提示配置位置 -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<!-- spring mvc 统一异常处理器  -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- shiro 没有权限统一跳转至 unauthorized -->
				<prop key="org.apache.shiro.authz.UnauthorizedException"> 
					unauthorized 
				</prop>
				<!-- SpringMVC在超出上传文件限制时,会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">
					error_fileupload
				</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置使Spring采用CGLIB代理 使aop/shiro等依赖代理的注解生效 -->
    <aop:aspectj-autoproxy proxy-target-class="true" /> 
</beans>